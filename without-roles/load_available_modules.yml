---
- name: Load available kernel modules
  hosts: all
  become: true
  roles:
    - common

  tasks:
    - name: Verify if the managed modules file exists
      ansible.builtin.stat:
        path: "{{ managed_modules_path }}"
      register: managed_modules_file_stat
      delegate_to: localhost

    - name: Set managed_modules to empty list if file is missing
      ansible.builtin.set_fact:
        managed_modules: []
      when: not managed_modules_file_stat.stat.exists

    - name: Exit playbook if the managed modules file is missing
      ansible.builtin.debug:
        msg: "Managed modules file is missing for {{ ansible_hostname }}. Skipping all tasks."
      when: not managed_modules_file_stat.stat.exists
      tags: skip

    - name: Load the list of missing kernel modules
      ansible.builtin.slurp:
        src: "{{ managed_modules_path }}"
      register: managed_modules_file
      delegate_to: localhost
      when: managed_modules_file_stat.stat.exists

    - name: Decode JSON content of managed modules
      ansible.builtin.set_fact:
        managed_modules: "{{ managed_modules_file['content'] | b64decode | from_json }}"
      when: managed_modules_file_stat.stat.exists

    - name: Skip node if no missing modules are found
      ansible.builtin.debug:
        msg: "No missing modules for {{ ansible_hostname }}. Skipping."
      when: managed_modules | length == 0
      changed_when: false
      tags: skip

    - name: Initialize empty list for missing modules
      ansible.builtin.set_fact:
        missing_modules: []

    - name: Verify if managed_modules is empty and skip if so
      ansible.builtin.debug:
        msg: "Modules to be loaded for {{ ansible_hostname }}: {{ managed_modules }}"
      when: managed_modules | length > 0
      tags: skip

    - name: Check if each kernel module is available using modinfo
      ansible.builtin.command:
        cmd: "modinfo {{ item }}"
      register: modinfo_status
      ignore_errors: true
      changed_when: false
      loop: "{{ managed_modules }}"
      loop_control:
        loop_var: item
      when: managed_modules | length > 0

    - name: Collect missing kernel modules (those not available)
      ansible.builtin.set_fact:
        missing_modules: "{{ missing_modules + [item] }}"
      when: modinfo_status.results | selectattr('item', 'equalto', item) | map(attribute='rc') | first != 0
      loop: "{{ managed_modules }}"
      loop_control:
        loop_var: item

    - name: Verify if any modules are missing and continue loading if found
      ansible.builtin.debug:
        msg: "Modules to be loaded: {{ managed_modules }}; Missing modules not available in the kernel: {{ missing_modules }}"
      when: missing_modules | length > 0

    - name: Load available kernel modules
      community.general.modprobe:
        name: "{{ item }}"
        state: present
        persistent: "present"
      when: item not in missing_modules
      loop: "{{ managed_modules }}"
      loop_control:
        loop_var: item

    - name: Write missing kernel modules to file
      ansible.builtin.copy:
        dest: "{{ missing_modules_path }}"
        content: "{{ missing_modules | to_json }}"
        mode: '0644'
      delegate_to: localhost

    - name: Clean up not-loaded modules file
      ansible.builtin.file:
        path: "{{ managed_modules_path }}"
        state: absent
      delegate_to: localhost
      when: clean_up_list
