- name: Build missing kernel modules
  hosts: all
  become: true
  roles:
    - common

  tasks:
    - name: Verify if the missing modules file exists
      ansible.builtin.stat:
        path: "{{ missing_modules_path }}"
      register: missing_modules_file_stat
      delegate_to: localhost

    - name: Set missing_modules to an empty list if file is missing
      ansible.builtin.set_fact:
        missing_modules: []
      when: not missing_modules_file_stat.stat.exists

    - name: Exit playbook if the missing modules file is missing
      ansible.builtin.debug:
        msg: "Missing modules file is missing for {{ ansible_hostname }}. Skipping all tasks."
      when: not missing_modules_file_stat.stat.exists
      tags: skip

    - name: Load missing modules list
      ansible.builtin.slurp:
        src: "{{ missing_modules_path }}"
      register: missing_modules_file
      delegate_to: localhost
      when: missing_modules_file_stat.stat.exists

    - name: Decode JSON content of missing modules
      ansible.builtin.set_fact:
        missing_modules: "{{ missing_modules_file['content'] | b64decode | from_json }}"
      when: missing_modules_file_stat.stat.exists

    - name: Filter modules that are missing and have git_url defined
      ansible.builtin.set_fact:
        modules_to_build: "{{ kernel_modules | selectattr('name', 'in', missing_modules) | selectattr('git_url', 'defined') | list }}"

    - name: Display modules to be built
      ansible.builtin.debug:
        msg: "Modules to be built: {{ modules_to_build }}"

    - name: Ensure build directory exists
      ansible.builtin.file:
        path: "{{ build_dir }}"
        state: directory
        mode: '0755'

    - name: Ensure directory exists for git repository
      ansible.builtin.file:
        path: "{{ build_dir }}/{{ item.name }}"
        state: directory
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item

    - name: Check if directory is a git repository
      ansible.builtin.stat:
        path: "{{ build_dir }}/{{ item.name }}/.git"
      register: git_repo_stat
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item

    - name: Reset repository to last commit
      ansible.builtin.command:
        cmd: "git reset --hard HEAD"
      args:
        chdir: "{{ build_dir }}/{{ item.name }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item
        index_var: loop_index
      when: item.name == "amd_energy" and git_repo_stat.results[loop_index].stat.exists
      register: reset_results
      failed_when: reset_results is failed or reset_results.rc != 0

    - name: Clone module repositories
      ansible.builtin.git:
        repo: "{{ item.git_url }}"
        dest: "{{ build_dir }}/{{ item.name }}"
        update: yes
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item

    - name: Check if dkms.conf exists and extract PACKAGE_VERSION
      ansible.builtin.command:
        cmd: "grep '^PACKAGE_VERSION=' {{ build_dir }}/{{ item.name }}/dkms.conf | cut -d '=' -f 2-"
      args:
        chdir: "{{ build_dir }}/{{ item.name }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item
      register: version_output
      failed_when: false

    - name: Set module version fact
      ansible.builtin.set_fact:
        module_versions: "{{ module_versions | default({}) | combine({item.item.name: (version_output.results[item.index].stdout | default('1.0')).strip()}) }}"
      loop: "{{ version_output.results }}"
      loop_control:
        label: "{{ item.item.name }}"

    - name: Debug module versions
      ansible.builtin.debug:
        msg: "Module versions: {{ module_versions }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item

    - name: Check DKMS status for modules
      ansible.builtin.command:
        cmd: "dkms status {{ item.name }}/{{ module_versions[item.name] }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item
      register: dkms_status
      failed_when: false
      changed_when: false

    - name: Remove module if added but not installed
      ansible.builtin.command:
        cmd: "dkms remove {{ item.item.name }}/{{ module_versions[item.item.name] }} --all"
      loop: "{{ dkms_status.results }}"
      loop_control:
        loop_var: item
      when:
        - item.rc == 0
        - "'added' in item.stdout"
        - "'installed' not in item.stdout"
      register: dkms_remove_results

    - name: Register module with DKMS
      ansible.builtin.command:
        cmd: "dkms add ../{{ item.name }}"
      args:
        chdir: "{{ build_dir }}/{{ item.name }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item
      register: dkms_add_results
      ignore_errors: true
      failed_when: "'already contains' not in dkms_add_results.stderr"

    - name: Patch amd_energy source code for kernel version 6.8
      ansible.builtin.command:
        cmd: "patch -p1"
        stdin: "{{ lookup('file', 'roles/common/files/amd_energy_kernel_version.patch') }}"
      args:
        chdir: "{{ build_dir }}/{{ item.name }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item
      when: item.name == "amd_energy" and ansible_kernel is version('6.8.0', 'ge') and ansible_kernel is not version('6.9.0', 'ge')
      register: patch_results
      failed_when: patch_results is failed or patch_results.rc != 0

    - name: Build module with DKMS
      ansible.builtin.command:
        cmd: "dkms build -m {{ item.name }} -v {{ module_versions[item.name] | default('1.0') }}"
      args:
        chdir: "{{ build_dir }}/{{ item.name }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item
      register: dkms_build_results
      failed_when: dkms_build_results.rc != 0 and 'Error!' in dkms_build_results.stderr


    - name: Install module with DKMS
      ansible.builtin.command:
        cmd: "dkms install -m {{ item.name }} -v {{ module_versions[item.name] | default('1.0') }}"
      loop: "{{ modules_to_build }}"
      loop_control:
        loop_var: item
      register: dkms_install_results
      failed_when: dkms_install_results.rc != 0 and 'Error!' in dkms_install_results.stderr

    - name: Clean up missing modules file
      ansible.builtin.file:
        path: "{{ missing_modules_path }}"
        state: absent
      delegate_to: localhost
      when: clean_up_list
