---
# This task is intended to be looped over with "item" being a kernel module config
# Example:
# item:
#   name: amd_energy
#   git_repo: https://github.com/amd/amd_energy.git

- name: "Create temporary build directory for build of {{ item.name }}"
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: temp_workdir

- ansible.builtin.set_fact:
    module_dir: "{{ temp_workdir.path }}/{{ item.name }}"

- name: "Clone the module repository for {{ item.name }}"
  git:
    repo: "{{ item.git_repo }}"
    dest: "{{ module_dir }}"

- name: "Read dkms.conf file of {{ item.name }}"
  ansible.builtin.set_fact:
    dkms_conf_content: "{{ lookup('file', '{{ module_dir }}/dkms.conf') }}"

- name: "Extract PACKAGE_VERSION of {{ item.name }} using regex"
  ansible.builtin.set_fact:
    package_version: >-
      {{ dkms_conf_content | regex_findall('PACKAGE_VERSION="(.+)"', '\\1') | first }}

# RC 0 - ok
# RC 1 - general error
# RC 2 - folder not found
# RC 3 - module already added
- name: "Add {{ item.name }} module to DKMS tree"
  become: True
  command: "dkms add {{ module_dir }}"
  failed_when: dkms_add.rc not in [0,3]
  changed_when: dkms_add.rc == 0
  register: dkms_add

- name: "Build {{ item.name }} module using DKMS"
  become: True
  command: "dkms build -m {{ item.name }}/{{ package_version }}"
  args:
    chdir: "{{ module_dir }}"
  register: dkms_build
  changed_when: "'already built for kernel' not in dkms_build.stdout"

- name: "Install {{ item.name }} module using DKMS"
  become: True
  command: "dkms install --force {{ item.name }}/{{ package_version }}"
  args:
    chdir: "{{ module_dir }}"
  changed_when: "'already installed on kernel' not in dkms_install.stdout"
  register: dkms_install
