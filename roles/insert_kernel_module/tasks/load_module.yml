---
- name: "Detect if the module {{ kernel_module.name }} is present in kernel"
  ansible.builtin.command: "modinfo {{ kernel_module.name }}"
  register: modinfo
  failed_when: false
  changed_when: false

- name: Use modinfo results to get the module type
  set_fact:
    module_type: |-
      {% if '(builtin)' in modinfo.stdout -%}
      builtin
      {%- elif '/lib/modules' in modinfo.stdout -%}
      loadable
      {%- elif 'not found' in modinfo.stderr -%}
      notfound
      {%- else -%}
      error
      {%- endif %}

- name: Raise error if modprobe returned invalid output
  fail:
    msg: |
      "modinfo {{ kernel_module.name }}" returned unexpected error: {{ modinfo.stderr }}
  when: module_type == "error"

- name: Load kernel module
  become: true
  community.general.modprobe:
    name: "{{ kernel_module.name }}"
    params: "{{ kernel_module.params | default(omit) }}"
    persistent: "present"
  when: module_type == "loadable"

- include_tasks: build_module.yml
  when: module_type == "notfound"

# We do nothing if the module is builtin