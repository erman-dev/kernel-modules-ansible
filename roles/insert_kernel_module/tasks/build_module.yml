---
- fail:
    msg: >-
      The playbook attempted to build the module "{{ kernel_module.name }}" 
      To build a module, git_repo attribute must be defined! 
      This means that the module is missing from the kernel or you've entered 
      invalid kernel_build_opt parameter. If you belive that this is incorrect, 
      check your config.
  when: kernel_module.git_repo is not defined

- name: "{{ kernel_module.name }} : Create temporary build directory for build"
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: temp_workdir

- ansible.builtin.set_fact:
    module_dir: "{{ temp_workdir.path }}/{{ kernel_module.name }}"

- name: "{{ kernel_module.name }} : Clone the module repository"
  git:
    repo: "{{ kernel_module.git_repo }}"
    dest: "{{ module_dir }}"
    version: "{{ kernel_module.git_repo_tag | default(omit) }}"

- name: "{{ kernel_module.name }} : Apply patches"
  ansible.posix.patch:
    src: "{{ patch }}"
    basedir: "{{ module_dir }}"
    strip: 1
  loop: "{{ kernel_module.patches }}"
  loop_control:
    loop_var: patch
  when: 
    - kernel_module.patches is defined
    - kernel_module.patches is iterable

- name: "{{ kernel_module.name }} : Detect dkms.conf file"
  ansible.builtin.stat:
    path: "{{ module_dir }}/dkms.conf"
  register: dmks_file

- fail:
    msg: >-
      The repository {{ kernel_module.git_repo }} is missing the dkms.conf file.
      These plays are compatible only with kernel modules that support build with DKMS!
  when: not dmks_file.stat.exists

- name: "{{ kernel_module.name }} : Extract PACKAGE_VERSION using regex"
  ansible.builtin.shell: |
    grep '^PACKAGE_VERSION=' {{ module_dir }}/dkms.conf | awk -F'=' '{print $2}';
  register: package_version_grep
  changed_when: false

- ansible.builtin.set_fact:
    package_version: "{{ package_version_grep.stdout }}"

- block:
    # RC 0 - ok
    # RC 1 - general error
    # RC 2 - folder not found
    # RC 3 - module already added
    - name: "{{ kernel_module.name }} : Add module to DKMS tree"
      become: True
      ansible.builtin.command: "dkms add {{ module_dir }}"
      failed_when: dkms_add.rc not in [0,3]
      changed_when: dkms_add.rc == 0
      register: dkms_add

    - name: "{{ kernel_module.name }} : Build module using DKMS"
      become: True
      ansible.builtin.command: >
        dkms build {% if kernel_module.get('force_build', False) %}--force{% endif %}
        -m {{ kernel_module.name }}
        -v {{ package_version }}
      args:
        chdir: "{{ module_dir }}"
      register: dkms_build
      changed_when: "'already built for kernel' not in dkms_build.stdout"

    - name: "{{ kernel_module.name }} : Install module using DKMS"
      become: True
      ansible.builtin.command: >
        dkms install {% if kernel_module.get('force_build', False) %}--force{% endif %}
        -m {{ kernel_module.name }}
        -v {{ package_version }}
      args:
        chdir: "{{ module_dir }}"
      changed_when: "'already installed on kernel' not in dkms_install.stdout"
      register: dkms_install

  always:
    - name: "{{ kernel_module.name }} : Cleanup temporary directory"
      ansible.builtin.file:
        path: "{{ temp_workdir.path }}"
        state: absent
