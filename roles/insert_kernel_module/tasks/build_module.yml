---
- name: "Fail on missing git_repo : {{ insert_kernel_module_data.name }}"
  ansible.builtin.fail:
    msg: >-
      The playbook attempted to build the module "{{ insert_kernel_module_data.name }}"
      To build a module, git_repo attribute must be defined!
      This means that the module is missing from the kernel or you've entered
      invalid kernel_build_opt parameter. If you belive that this is incorrect,
      check your config.
  when: insert_kernel_module_data.git_repo is not defined

- name: "Create temporary build directory for build : {{ insert_kernel_module_data.name }}"
  ansible.builtin.tempfile:
    state: directory
    suffix: build
  register: temp_workdir

- name: "Set module directory : {{ insert_kernel_module_data.name }}"
  ansible.builtin.set_fact:
    module_dir: "{{ temp_workdir.path }}/{{ insert_kernel_module_data.name }}"

- name: "Clone the module repository : {{ insert_kernel_module_data.name }}"
  ansible.builtin.git:
    repo: "{{ insert_kernel_module_data.git_repo }}"
    dest: "{{ module_dir }}"
    version: "{{ insert_kernel_module_data.git_repo_tag | default(omit) }}"

- name: "Apply patches : {{ insert_kernel_module_data.name }}"
  ansible.posix.patch:
    src: "{{ patch }}"
    basedir: "{{ module_dir }}"
    strip: 1
  loop: "{{ insert_kernel_module_data.patches }}"
  loop_control:
    loop_var: patch
  when:
    - insert_kernel_module_data.patches is defined
    - insert_kernel_module_data.patches is iterable

- name: "Detect dkms.conf file : {{ insert_kernel_module_data.name }}"
  ansible.builtin.stat:
    path: "{{ module_dir }}/dkms.conf"
  register: dmks_file

- name: "Fail on missing dkms.conf : {{ insert_kernel_module_data.name }}"
  ansible.builtin.fail:
    msg: >-
      The repository {{ insert_kernel_module_data.git_repo }} is missing the dkms.conf file.
      These plays are compatible only with kernel modules that support build with DKMS!
  when: not dmks_file.stat.exists

- name: "Extract PACKAGE_VERSION using regex : {{ insert_kernel_module_data.name }}"
  ansible.builtin.shell: |
    set -o pipefail
    grep '^PACKAGE_VERSION=' {{ module_dir }}/dkms.conf | awk -F'=' '{print $2}';
  args:
    executable: /bin/bash
  register: package_version_grep
  changed_when: false

- name: "Set package version : {{ insert_kernel_module_data.name }}"
  ansible.builtin.set_fact:
    package_version: "{{ package_version_grep.stdout }}"

- name: "Install module : {{ insert_kernel_module_data.name }}"
  block:
    # RC 0 - ok
    # RC 1 - general error
    # RC 2 - folder not found
    # RC 3 - module already added
    - name: "Add module to DKMS tree : {{ insert_kernel_module_data.name }}"
      become: true
      ansible.builtin.command: "dkms add {{ module_dir }}"
      failed_when: dkms_add.rc not in [0,3]
      changed_when: dkms_add.rc == 0
      register: dkms_add

    - name: "Build module using DKMS : {{ insert_kernel_module_data.name }}"
      become: true
      ansible.builtin.command: >
        dkms build {% if insert_kernel_module_data.get('force_build', False) %}--force{% endif %}
        -m {{ insert_kernel_module_data.name }}
        -v {{ package_version }}
      args:
        chdir: "{{ module_dir }}"
      register: dkms_build
      changed_when: "'already built for kernel' not in dkms_build.stdout"

    - name: "Install module using DKMS : {{ insert_kernel_module_data.name }}"
      become: true
      ansible.builtin.command: >
        dkms install --force
        -m {{ insert_kernel_module_data.name }}
        -v {{ package_version }}
      args:
        chdir: "{{ module_dir }}"
      changed_when: "'Installation' in dkms_install.stdout"
      register: dkms_install

  always:
    - name: "Cleanup temporary directory : {{ insert_kernel_module_data.name }}"
      ansible.builtin.file:
        path: "{{ temp_workdir.path }}"
        state: absent
