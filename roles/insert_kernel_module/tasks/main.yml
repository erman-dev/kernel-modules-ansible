---
# This role loads one kernel module specified in "insert_kernel_module_data"

- name: "Fail on incorrect input : {{ insert_kernel_module_data.name }}"
  ansible.builtin.fail:
    msg: >-
      To run this role, you need to pass insert_kernel_module_data object with attribute
      "name" defined.
  when: insert_kernel_module_data.name is not defined

# Detect what type of kernel module it is - builtin, loadable, or missing
- name: "Import tasks to detect module type : {{ insert_kernel_module_data.name }}"
  ansible.builtin.import_tasks: detect_module.yml

# Detect CPU information like model and family
- name: "Import tasks that retrieve CPU info : {{ insert_kernel_module_data.name }}"
  ansible.builtin.import_tasks: cpu_info.yml

# Certain kernel modules can have contraints that will make sure their are installed
# only to hosts with CPUs with given family and model. If the module has no contraints
# then it will be installed to all hosts.
- name: "Compare the module constraints to host info"
  ansible.builtin.set_fact:
    insert_kernel_module_constraints_fulfilled: |-
      {%- if insert_kernel_module_data.cpu_constraints -%}
        {{ insert_kernel_module_cpu_family in insert_kernel_module_data.cpu_constraints.family and
           insert_kernel_module_cpu_model in insert_kernel_module_data.cpu_constraints.model }}
      {%- else -%}
        True
      {%- endif -%}

# Sometimes it might be preffered to use the off-tree module instead of the module
# that is already shipped with the kernel. When a force_build flag is set for
# a module a build_module.yml will be called instead of loading it.
# NOTE(r-krcek): This needs testing, I am not sure if it works as-is!!
- name: "Fail if the user is trying to rebuild builtin module : {{ insert_kernel_module_data.name }}"
  ansible.builtin.fail:
    msg: >-
      Detected module_type is BUILTIN, but the force_build parameter was set to True.
      You cannot force build of a builtin module! Please check you kernel module configuration.
  when:
    - module_type == "builtin"
    - insert_kernel_module_data.force_build | default(False)

- name: Build and load the module
  when: insert_kernel_module_constraints_fulfilled
  block:
    - name: "Build module : {{ insert_kernel_module_data.name }}"
      ansible.builtin.include_tasks: build_module.yml
      when:
        - insert_kernel_module_data.force_build | default(False) or module_type == "missing"

    # And lastly the module is loaded, but only if it is loadable or built using DKMS
    - name: "Load kernel module : {{ insert_kernel_module_data.name }}"
      become: true
      community.general.modprobe:
        name: "{{ insert_kernel_module_data.name }}"
        params: "{{ insert_kernel_module_data.params | default(omit) }}"
        persistent: "present"
      when:
        - module_type in  ["loadable", "missing"]
